version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";import "../import/junos.xsl";var $event = event-script-input/trigger-event/message;var $connection = jcs:open();template parse-log-message($message) {  /* match only JSRPD messages, return XML of message */  /* JSRPD_SET_IP_MON_FAILURE JSRPD_RG_STATE_CHANGE */  var $ip-mon-header = "JSRPD_SET_IP_MON_FAILURE";  var $rg-state-change = "JSRPD_RG_STATE_CHANGE";  var $sane = jcs:regex("(.*): (.*)",$message);  var $type = $sane[2];  var $data = $sane[3];  if ($type == $ip-mon-header) {    /* IP Monitor failure */    var $rg-group-regex = jcs:regex("IP Monitor failed for redundancy-group ([0-9]+)",$data);    var $rg-group = $rg-group-regex[2];    if ($rg-group != "") {      <output> "IP Monitor failed for rg " _ $rg-group;      /* TAKE ACTION HERE */      call open-config();      call disable-ospf();      call commit-config(){        with $message = "OSPF Disabled due to IP Monitor failure";      }    } else {      /* no match made */    }  } else if ($type == $rg-state-change) {    /* RG state change */    var $rg-group-regex = jcs:regex("Redundancy-group ([0-9]+) transitioned from '(.*)' to '(.*)' state due to (.*)",$data);    var $rg-group = $rg-group-regex[2];    var $start-state = $rg-group-regex[3];    var $stop-state = $rg-group-regex[4];    var $cause = $rg-group-regex[5];    if ($rg-group != "") {      <output> "Transiton of rg " _ $rg-group;      /* TAKE ACTION HERE */    } else {      /* no match made */    }  } else {    /* Message doesn't match */  }}/* function to disable ospf */template disable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable>;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to enable ospf */template enable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable delete="delete">;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to open config */template open-config() {  var $rpc = {    <open-configuration> {      <private>;    }  }  expr jcs:execute($connection,$rpc);}/* function to commit config */template commit-config($message) {  var $rpc = {    <commit-configuration> {      <log> $message;    }  }  expr jcs:execute($connection,$rpc);}/* main function */match / {  call parse-log-message(){    with $message = $event;  }  <event-script-results> {    <output> "MESSAGE RECEIVED: " _ $event;  }}