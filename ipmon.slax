version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";import "/var/db/scripts/import/junos.xsl";var $event = event-script-input/trigger-event/message;var $connection = jcs:open();/* globals - statically defined, can be placed in the config */var $monitored-rg = "1";var $ospf-area = "0.0.0.0";var $node-map = {  <nodes> {    <node> {      <name> "node0";      <ospf-int> "reth0.0";    }    <node> {      <name> "node1";      <ospf-int> "reth1.0";    }  }}template parse-log-message($message) {  /* match only JSRPD messages, return XML of message */  /* JSRPD_SET_IP_MON_FAILURE JSRPD_RG_STATE_CHANGE */  var $ip-mon-fail = "JSRPD_SET_IP_MON_FAILURE";  var $ip-mon-up = "JSRPD_UNSET_IP_MON_FAILURE";  var $sane = jcs:regex("(.*): (.*)",$message);  var $type = $sane[2];  var $data = $sane[3];  if ($type == $ip-mon-fail) {    /* IP Monitor failure */    var $rg-group-regex = jcs:regex("IP Monitor failed for redundancy-group ([0-9]+)",$data);    var $rg-group = $rg-group-regex[2];    if ($rg-group != "") {      <output> "IP Monitor failed for rg " _ $rg-group;      if ($monitored-rg == $rg-group) {        /* TAKE ACTION HERE */        /*          Determine which interface to disable OSPF on          Disable it        */        <output> "Monitored RG " _ $monitored-rg _ " has failed. Taking action.";        var $node-name = {          call get-local-node();        }        var $rg-status = {          call get-rg-status() {            with $rg-id = "0";          }        }        var $rg-status-nodes = ext:node-set($rg-status);        <output> "RG0 Status: " _ $rg-status-nodes//node[name="node0"]/status _ " " _ $rg-status-nodes//node[name="node0"]/status;        var $nodes = ext:node-set($node-map);        /* check to see that rg 0 is in primary state */        if ("primary" == $rg-status-nodes//node[name=$node-name]/status) {          var $failures = {            call get-rg-failures() {              with $node-name = $node-name;              with $rg-id = $monitored-rg;            }          }          var $failures-nodes = ext:node-set($failures);          var $logs = ext:node-set($failures-nodes//logs//*);          for-each($logs) {            /* parse each message */            var $line = normalize-space(.);            var $new-line = jcs:regex("(.*) : (.*), reason: (.*)",$line);            var $failure-reason = normalize-space($new-line[4]);            <output> "Failure Reason: " _ $failure-reason;            <output> "Failure Reason line: " _ .;            if (normalize-space($failure-reason) == "Control link failure") {              <output> "CONTROL LINK FAILIURE!";              <output> "Node Name: " _ $node-name _ " OSPF int " _ $nodes//node[name=$node-name];              <output> "Disabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int;              call open-config();              call disable-ospf-interface(){                with $interface = $nodes//node[name=$node-name]/ospf-int;              }              call commit-config(){                with $message = "OSPF Disabled due to IP Monitor failure";              }            }          }        } else {          <output> "Node " _ $node-name _ " no changes made";        }      }    } else {      /* no match made */    }  } else {    /* Message doesn't match */  }}/* function to disable ospf */template disable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable>;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to disable ospf of a specific interface*/template disable-ospf-interface($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <area> {              <name> $ospf-area;              <interface> {                <name> $interface;                <disable>;              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to enable ospf of a specific interface*/template enable-ospf-interface($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <area> {              <name> $ospf-area;              <interface> {                <name> $interface;                <disable>;              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to enable ospf */template enable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable delete="delete">;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to get chassis cluster information */template get-cluster-information(){  var $rpc = {    <get-chassis-cluster-information>;  }  var $results = jcs:execute($connection,$rpc);  copy-of $results;}template get-rg-failures($node-name,$rg-id){  var $results = {    call get-cluster-information();  }  var $results-nodes = ext:node-set($results);  var $failure-reason = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]//monitoring-failure-string;  var $failure-messages = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]/redundancy-group-state-transition-events;  <cluster-information> {    <reason> $failure-reason;    <logs> {      copy-of ext:node-set($failure-messages);    }  }}/* function to get chassis cluster status*/template get-cluster-status(){  var $rpc = {    <get-chassis-cluster-status>;  }  var $results = jcs:execute($connection,$rpc);  copy-of $results;}template get-rg-status($rg-id) {  var $results = {    call get-cluster-status();  }  var $results-nodes = ext:node-set($results);  var $rg-status-node0 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[1];  var $rg-status-node1 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[2];  <status> {    <rg> $rg-id;    <node> {      <name> "node0";      <status> $rg-status-node0;    }    <node> {      <name> "node1";      <status> $rg-status-node1;    }  }}/* function to open config */template open-config() {  var $rpc = {    <open-configuration> {      <private>;    }  }  expr jcs:execute($connection,$rpc);}/* function to commit config */template commit-config($message) {  var $rpc = {    <commit-configuration> {      <log> $message;    }  }  expr jcs:execute($connection,$rpc);}template get-local-node() {  var $rpc = {    <rpc> {      <command> "show chassis routing-engine node local";    }  }  var $results = jcs:execute($connection,$rpc);  <result> $results/multi-routing-engine-item/re-name;}/* main function */match / {  /* Determine who I am  */  call parse-log-message(){    with $message = $event;  }  <event-script-results> {    <output> "MESSAGE RECEIVED: " _ $event;  }}