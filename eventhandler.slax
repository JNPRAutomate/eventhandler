version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns ext = "http://xmlsoft.org/XSLT/namespace";
ns date = "http://exslt.org/dates-and-times";
import "/var/db/scripts/import/junos.xsl";

/* globals */

/*

  ISSUES!!!

  Node 0 Southbound link shut
  2) Node 0 reth0.0 OSPF is disabled - ACK as it would because of the logic path, only occurs if RG0 state is primary
  3) Node 1 does not flip the RG-0 priority - CHANGED: to ALWAYS flip priorities if condition occurs

  Node 0 Southbound link restoration
  1) Since both node0 and 1 report a priority of 1 for RG-0 the control plane shuts down on node 1 and changes to node 0 -  CHANGED: to ALWAYS flip priorities if condition occurs
  2) OSPF does not re-enable on node 0 reth0.0 - THIS IS NOT BEING TRIGGERED TODO: Determine why this isnt being triggered

*/

/* event message recieved from the event engine */
var $event = event-script-input/trigger-event/message;

/* connection to local routing engine */
var $connection = jcs:open();

/* rpc to get conf of eventhandler */
/* inherit="inherit" required to pull config from apply-groups */
var $eventhandler-config = {
  <rpc> {
    <get-configuration inherit="inherit"> {
      <configuration> {
        <chassis> {
          <cluster> {
            <apply-macro> {
              <name> "eventhandler";
            }
          }
        }
      }
    }
  }
}
/* results from pulling config */
var $config-results = jcs:execute($connection,$eventhandler-config);
/* RG to watch for RG state changes */
var $monitored-rg = $config-results//apply-macro[name="eventhandler"]/data[name="monitored-rg"]/value;
/* OSPF area to disable interface in */
var $ospf-area = $config-results//apply-macro[name="eventhandler"]/data[name="ospf-area"]/value;
/* routing instance OSPF is configured in */
var $ospf-ri = $config-results//apply-macro[name="eventhandler"]/data[name="ospf-ri"]/value;
/* max diff in seconds between two events suggested 30 */
var $event-diff = $config-results//apply-macro[name="eventhandler"]/data[name="event-diff"]/value;
/* max time to sleep once seeing trigger event suggested 5 */
var $event-sleep = $config-results//apply-macro[name="eventhandler"]/data[name="event-sleep"]/value;
/* max diff in sec between events for ip restore suggested 60 */
var $restore-diff = $config-results//apply-macro[name="eventhandler"]/data[name="restore-diff"]/value;
/* redundancy group for control plane or RG 0 to follow in the event of a failover */
var $follow-the-leader-rg = $config-results//apply-macro[name="eventhandler"]/data[name="follow-the-leader"]/value;

/* XML structure used to map information to each node in the cluster */
var $node-map = {
  <nodes> {
    <node> {
      <name> "node0"; /* node0-ospf-int in config */
      <node-id> "0";
      <ospf-int> $config-results//apply-macro[name="eventhandler"]/data[name="node0-ospf-int"]/value; /* Interface to disable on node0 if failure conditions matched */
    }
    <node> {
      <name> "node1"; /* node1-ospf-int in config */
      <node-id> "1";
      <ospf-int> $config-results//apply-macro[name="eventhandler"]/data[name="node1-ospf-int"]/value; /* Interface to disable on node1 if failure conditions matched */
    }
  }
}

/* parse log message */
template parse-log-message($message) {
  /* match only JSRPD messages, return XML of message */

  /* types to match */
  var $rg-state-change = "JSRPD_RG_STATE_CHANGE";
  var $ip-mon-fail = "JSRPD_SET_IP_MON_FAILURE";
  var $ip-mon-up = "JSRPD_UNSET_IP_MON_FAILURE";

  /* use regex to break apart message */
  var $sane = jcs:regex("(.*): (.*)",normalize-space($message));
  var $type = normalize-space($sane[2]);
  var $data = normalize-space($sane[3]);

  if ($type == $rg-state-change) {
    /* Redundancy group state change JSRPD_RG_STATE_CHANGE */
    var $rg-group-regex = jcs:regex("Redundancy-group ([0-9]+) transitioned from '([a-zA-Z\-]*)' to '([a-zA-Z\-]*)' state due to (.*)",$data);
    var $rg-group = $rg-group-regex[2];
    var $old-rg-state = $rg-group-regex[3];
    var $new-rg-state = $rg-group-regex[4];

    if ($rg-group != "") {
      <output> "Redundancy group " _ $rg-group _ " transitioned state";
      if ($monitored-rg == $rg-group) {
        /* Failure conditions met, taking action */
        <output> "Monitored RG " _ $monitored-rg _ " has failed. Taking action.";
        var $node-name = {
          call get-local-node();
        }
        var $rg-status = {
          call get-rg-status() {
            with $rg-id = "0";
          }
        }

        var $rg-status-nodes = ext:node-set($rg-status);
        var $nodes = ext:node-set($node-map);
        /* Validate that the state is now primary for rg 0 */
        if (("primary" == $rg-status-nodes//node[name=$node-name]/status) or ("secondary" == $rg-status-nodes//node[name=$node-name]/status) or ("secondary-hold" == $rg-status-nodes//node[name=$node-name]/status)) {
          var $failures = {
            call get-rg-failures() {
              with $node-name = $node-name;
              with $rg-id = $monitored-rg;
            }
          }
          var $failures-nodes = ext:node-set($failures);
          var $logs = ext:node-set($failures-nodes//logs//*);

          for-each($logs) {
            /* loop through chassis cluster log messages */
            var $line = normalize-space(.);
            var $new-line = jcs:regex("(.*) : (.*)->(.*), reason: (.*)",$line);
            var $time = normalize-space($new-line[2]);
            var $old-state = $new-line[3];
            var $new-state = $new-line[4];
            var $failure-reason = normalize-space($new-line[5]);

            if ((normalize-space($failure-reason) == "Control link failure") or (normalize-space($failure-reason) == "Control & Fabric links down")) {
              /* failure reason was a Control link failure or Control & Fabric links down */
              <output> "Failure Reason: " _ $failure-reason _ " detected";
              var $current-time = date:date-time();

              var $isofmt = {
                call jdate-iso8601(){
                  with $date = $time;
                }
              }

              var $within-window = {
                call compare-date(){
                  with $date1 = $isofmt;
                  with $date2 = $current-time; /* current time */
                  with $diff = $event-diff;
                }
              }
              
              if ($within-window == "true") {
                /* event matched, checking for ip mon failure */
                <output> "Checking for IP Monitor Failure";

                /* waiting to check if ip mon failure occured also */
                expr jcs:sleep($event-sleep);

                var $ipmon-failures = {
                  call get-rg-failures() {
                    with $node-name = $node-name;
                    with $rg-id = $monitored-rg;
                  }
                }
                var $ipmon-failures-nodes = ext:node-set($ipmon-failures);
                var $ipmon-logs = ext:node-set($ipmon-failures-nodes//logs//*);
                var $ipmon-failure-reason = $ipmon-failures-nodes//reason;

                
                if ((normalize-space($ipmon-failure-reason) == "none") and (normalize-space($ipmon-failure-reason) != "ip-monitoring")) {
                  /* no IP mon failure detected */
                  var $node-priorities = {
                    call get-rg-conf-priorities() {
                      with $rg-id = "0";
                    }
                  }
                  var $node-priorities-nodes = ext:node-set($node-priorities);
                  call open-config();
                  
                  /* change node priorities */
                  <output> "Setting node priorities: Setting node0 to " _ $node-priorities-nodes//node[name="node1"]/priority _ " and setting node1 to " _ $node-priorities-nodes//node[name="node0"]/priority _ " for rg0";
                  call set-rg-priorities() {
                    with $node0 = $node-priorities-nodes//node[name="node1"]/priority;
                    with $node1 = $node-priorities-nodes//node[name="node0"]/priority;
                    with $rg-id = "0";
                  }

                  call commit-config(){
                    with $message = "Changing node priorities node0: " _ $node-priorities-nodes//node[name="node1"]/priority _ "  node1: "  _ $node-priorities-nodes//node[name="node1"]/priority;
                  }

                } else if ((normalize-space($ipmon-failure-reason) == "ip-monitoring") and (normalize-space($ipmon-failure-reason) != "none")) {
                  var $node-priorities = {
                    call get-rg-conf-priorities() {
                      with $rg-id = "0";
                    }
                  }
                  var $node-priorities-nodes = ext:node-set($node-priorities);
                  call open-config();

                  if ("primary" == $rg-status-nodes//node[name=$node-name]/status) {
                    /* Only disable OSPF if node is primary */
                    <output> "Disabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int _ " Failure Reason: " _ $ipmon-failure-reason;
                    call disable-ospf-interface-ri(){
                      with $interface = $nodes//node[name=$node-name]/ospf-int;
                    }
                    /* Check to see if node priorities should be swapped */
                    if ($node-name == "node1") {
                      /* do not swap priorities for node1 failures */

                    } else if ($node-name == "node0") {
                       <output> "Setting node priorities: Setting node0 to " _ $node-priorities-nodes//node[name="node1"]/priority _ " and setting node1 to " _ $node-priorities-nodes//node[name="node0"]/priority _ " for rg0";
                      call set-rg-priorities() {
                        with $node0 = $node-priorities-nodes//node[name="node1"]/priority;
                        with $node1 = $node-priorities-nodes//node[name="node0"]/priority;
                        with $rg-id = "0";
                      }
                    }

                  } else {
                    /* change node priorities */
                    <output> "Setting node priorities: Setting node0 to " _ $node-priorities-nodes//node[name="node1"]/priority _ " and setting node1 to " _ $node-priorities-nodes//node[name="node0"]/priority _ " for rg0";
                    call set-rg-priorities() {
                      with $node0 = $node-priorities-nodes//node[name="node1"]/priority;
                      with $node1 = $node-priorities-nodes//node[name="node0"]/priority;
                      with $rg-id = "0";
                    }
                  }

                  call commit-config(){
                    with $message = "Changing node priorities node0: " _ $node-priorities-nodes//node[name="node1"]/priority _ "  node1: "  _ $node-priorities-nodes//node[name="node1"]/priority;
                  }

                } else {
                  /* ip monitor faulure not matched */
                  <output> "Event: " _ $ipmon-failure-reason _ " not matched ";
                }
              } else {
                /* ip mon failure detected but not within approved window */
                <output> "Event: " _ $failure-reason _ " at " _ $isofmt _ " outside of window " _ $event-diff _ " seconds from now " _ $current-time;
              }
            }
          }
        } else {
          /* node state not matched to required state */
          <output> "Node state " _ $rg-status-nodes//node[name=$node-name]/status _ " does not match, skipping.";
        }
      } else if ($follow-the-leader-rg == $rg-group) {
        /* follow the leader checking */
        <output> "Checking the follow the leader status of redundancy group: " _ $follow-the-leader-rg;

        var $node-name = {
          call get-local-node();
        }
        var $nodes = ext:node-set($node-map);

        /* $node-name; local node determined earlier */
        var $rg0-status = {
          call get-rg-status() {
            with $rg-id = "0";
          }
        }
        var $rg0-status-nodes = ext:node-set($rg0-status);

        /* get status of the FTL rg */
        var $rgftl-status = {
          call get-rg-status() {
            with $rg-id = $follow-the-leader-rg;
          }
        }
        var $rgftl-status-nodes = ext:node-set($rgftl-status);

        /* Validate that the state is now primary for rg 0 */
        if (("primary" != $rg0-status-nodes//node[name=$node-name]/status) and ("primary" == $rgftl-status-nodes//node[name=$node-name]/status)) {
          /* node is not primary for RG0 but is primary for FTLRG */
          <output> "Node is not primary for RG0 but is primary for redundancy group " _ $follow-the-leader-rg _ " requesting failover";
          
          call request-rg-failover() {
            with $node = $nodes//node[name=$node-name]/node-id;
            with $redundancy-group = "0";
          }

          <output> "Resetting maual failover for redundancy group " _ $follow-the-leader-rg;
          /* reset manual failover */
          call reset-failover-flag() {
            with $redundancy-group = "0";
          }

        } else {
          /* node does not match conditions to initate follow the leader */
        }
      } else {
        /* rg not monitored */
        <output> "RG " _ $rg-group _ " not monitored, skipping.";
      }
    } else {
      /* rg group not set */
      <output> "RG not determined, skipping.";
    }

  } else if ($type == $ip-mon-up) {
    /* IP Monitor failure recovered JSRPD_UNSET_IP_MON_FAILURE */
    var $rg-group-regex = jcs:regex("IP Monitor failure recovered for redundancy-group ([0-9]+)",$data);
	  var $rg-group = $rg-group-regex[2];

    if ($rg-group != "") {
      /* redundancy group id detected */
      <output> "IP Monitor failure recovered for rg " _ $rg-group;
      if ($monitored-rg == $rg-group) {
        <output> "Failed monitored RG " _ $monitored-rg _ " has recovered. Taking action.";
				var $node-name = {
					call get-local-node();
				}
				var $rg-status = {
					call get-rg-status() {
						with $rg-id = "0";
					}
				}
        var $rg-status-nodes = ext:node-set($rg-status);
				var $nodes = ext:node-set($node-map);
        /* check to see that rg 0 is in primary state */
        var $chassis-cluster-info = {
  				call get-rg-failures() {
  					with $node-name = $node-name;
  					/* with $rg-id = "0"; */
  					with $rg-id = $monitored-rg;
  				}
  			}
        var $chassis-cluster-info-nodes = ext:node-set($chassis-cluster-info);
  			var $logs = ext:node-set($chassis-cluster-info-nodes//logs//*);
        for-each($logs) {
          var $line = normalize-space(.);
  				var $new-line = jcs:regex("(.*) : (.*)->(.*), reason: (.*)",$line);
  				var $time = normalize-space($new-line[2]);
  				var $old-state = $new-line[3];
  				var $new-state = $new-line[4];
  				var $rg-state-change-reason = normalize-space($new-line[5]);

          <output> "RG State change Reason: " _ $rg-state-change-reason;
          var $current-time = date:date-time();

          /* convert datetie to iso8601 format */
          var $isofmt = {
  					call jdate-iso8601() {
  						with $date = $time;
  					}
  				}

          /* calculate window between current time and event time */
  				var $within-window = {
  					call compare-date(){
  						with $date1 = $isofmt;
  						with $date2 = $current-time; /* current time */
  						with $diff = $restore-diff;
  					}
  				}

          /* only execute on first itteration since for-each loops happen concurrently and no sigular message identifed */
          if ($within-window == "true") {
            <output> "Event at " _ $isofmt _ " within " _ $restore-diff _ " seconds from now " _ $current-time;
  					<output> "Enabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int _ " RG change reason: " _ $rg-state-change-reason;
  					call open-config();
  					call enable-ospf-interface-ri(){
  						with $interface = $nodes//node[name=$node-name]/ospf-int;
  					}
  					call commit-config(){
  						with $message = "OSPF Enabled on interface " _ $nodes//node[name=$node-name]/ospf-int _ " due to IP Monitor recovery";
  					}
          } else {
            /* event outside of time window */
  					<output> "Event at " _ $isofmt _ " outside of window " _ $restore-diff _ " seconds from now " _ $current-time;
          } /* end time window check */
          /* end check on rg state change failure conditions */
        } /* end foreach statement */
      } else {
        /* rg group not monitored */
        <output> "RG " _ $rg-group _ " not monitored, skipping.";
      }
    } else {
      /* rg-group is undefined */
      <output> "RG not determined, skipping.";
    }
  } else {
    /* Message doesn't match */
    <output> "Type: " _ $type _ " and Message: " _ $data _ "not matched. No action taken";
  }
}

/* Helper functions */

/* function to disable ospf of a specific interface*/
template disable-ospf-interface-ri($interface){
  var $rpc = {
    <load-configuration> {
      <configuration> {
        <routing-instances> {
          <instance> {
            <name> $ospf-ri;
            <protocols> {
              <ospf> {
                <area> {
                  <name> $ospf-area;
                  <interface> {
                    <name> $interface;
                    <disable>;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  expr jcs:execute($connection,$rpc);
}

/* function to disable ospf of a specific interface*/
template enable-ospf-interface-ri($interface){
  var $rpc = {
    <load-configuration> {
      <configuration> {
        <routing-instances> {
          <instance> {
            <name> $ospf-ri;
            <protocols> {
              <ospf> {
                <area> {
                  <name> $ospf-area;
                  <interface> {
                    <name> $interface;
                    <disable delete="delete">;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  expr jcs:execute($connection,$rpc);
}

/* function set redundancy group priorities */
template set-rg-priorities($node0, $node1, $rg-id) {
  var $rpc = {
    <load-configuration> {
      <configuration> {
        <chassis> {
          <cluster> {
            <redundancy-group> {
              <name> $rg-id;
              <node> {
                <name> "0";
                <priority> $node0;
              }
              <node> {
                <name> "1";
                <priority> $node1;
              }
            }
          }
        }
      }
    }
  }
  expr jcs:execute($connection,$rpc);
}

/* function to get chassis cluster information */
template get-cluster-information(){
  var $rpc = {
    <get-chassis-cluster-information>;
  }
  var $results = jcs:execute($connection,$rpc);
  copy-of $results;
}

/* function to get the failure reasons from an RG based on node name */
template get-rg-failures($node-name,$rg-id){
  var $results = {
    call get-cluster-information();
  }
  var $results-nodes = ext:node-set($results);
  var $failure-reason = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]/redundancy-group-monitoring-information/monitoring-failure-string;
  var $failure-messages = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]/redundancy-group-state-transition-events;
  <cluster-information> {
    <reason> $failure-reason;
    <logs> {
      copy-of ext:node-set($failure-messages);
    }
  }
}

/* function to get chassis cluster status*/
template get-cluster-status(){
  var $rpc = {
    <get-chassis-cluster-status>;
  }
  var $results = jcs:execute($connection,$rpc);
  copy-of $results;
}

/* templete to get current status of rgs */
template get-rg-status($rg-id) {
  var $results = {
    call get-cluster-status();
  }
  var $results-nodes = ext:node-set($results);
  var $rg-status-node0 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[1];
  var $rg-status-node1 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[2];
  var $rg-priority-node0 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/device-priority[1];
  var $rg-priority-node1 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/device-priority[2];
  <status> {
    <rg> $rg-id;
    <node> {
      <name> "node0";
      <status> $rg-status-node0;
      <priority> $rg-priority-node0;
    }
    <node> {
      <name> "node1";
      <status> $rg-status-node1;
      <priority> $rg-priority-node1;
    }
  }
}

/* template to get the configured priorities of the nodes */
template get-rg-conf-priorities($rg-id) {
  /* function code */
  var $rpc = {
    <rpc> {
      <get-configuration> {
        <configuration> {
          <chassis> {
            <cluster>;
          }
        }
      }
    }
  }
  var $results = jcs:execute($connection,$rpc);
  <status> {
    <rg> $rg-id;
    <node> {
      <name> "node0";
      <priority> $results//redundancy-group[name=$rg-id]/node[name="0"]/priority;
    }
    <node> {
      <name> "node1";
      <priority> $results//redundancy-group[name=$rg-id]/node[name="1"]/priority;
    }
  }
}

/* function to open config */
template open-config() {
  var $rpc = {
    <open-configuration> {
      <private>;
    }
  }
  expr jcs:execute($connection,$rpc);
}

/* function to commit config */
template commit-config($message) {
  var $rpc = {
    <commit-configuration> {
      <log> $message;
    }
  }
  expr jcs:execute($connection,$rpc);
}

/* function to determine the local node name */
template get-local-node() {
  var $rpc = {
    <rpc> {
      <command> "show chassis routing-engine node local";
    }
  }
  var $results = jcs:execute($connection,$rpc);
  <result> $results/multi-routing-engine-item/re-name;
}

/* convert month to int */
template month-name-int($name) {
  if ($name == "Jan") {
    <result> "01";
  } else if ($name == "Feb") {
    <result> "02";
  } else if ($name == "Mar") {
    <result> "03";
  } else if ($name == "Apr") {
    <result> "04";
  } else if ($name == "May") {
    <result> "05";
  } else if ($name == "Jun") {
    <result> "06";
  } else if ($name == "Jul") {
    <result> "07";
  } else if ($name == "Aug") {
    <result> "08";
  } else if ($name == "Sep") {
    <result> "09";
  } else if ($name == "Oct") {
    <result> "10";
  } else if ($name == "Nov") {
    <result> "11";
  } else if ($name == "Dec") {
    <result> "12";
  } else {
    /* No match return empty */
    <result> "";
  }
}

/* pad a number with a 0 if it is less than 2 char in length */
template lpad-zero($date){
  if (string-length($date) < 2) {
    <result> "0" _ $date;
  } else {
    <result> $date;
  }
}

/* convert a timestamp found in show-chassis-cluster-information to iso8601 format */
template jdate-iso8601($date) {
  /* Expected format "Jul 11 13:44:09.650" */
  var $sane = jcs:regex("([A-Za-z]{3}) ([0-9]+) ([0-9]+:[0-9]+:[0-9]+)",normalize-space($date));
  var $month = {
    call month-name-int($name = $sane[2]);
  }
  var $day = {
    call lpad-zero() {
      with $date = $sane[3];
    }
  }
  var $time = $sane[4];
  var $year = date:year();
  var $isofmt = $year _ "-" _ $month _ "-" _ $day _ "T" _ $time _ "Z";
  <result> $isofmt;
}

/* template that checks if the diff between two times is within the specified diff */
/* $date1 and $date2 must be in ISO8601 format */
/* $diff is in seconds */
template compare-date($date1,$date2,$diff){
  var $d1seconds = date:seconds($date1);
  var $d2seconds = date:seconds($date2);
  var $calcdiff = $d2seconds - $d1seconds;
  if (($calcdiff <= $diff) and ($calcdiff >= 0)) { /* check both sides of the bounds */
    /* The times are within the diff */
    <result> "true";
  } else {
    /* returning false because both conditions failed */
    <result> "false";
  }
}

/* reset fail over flag */
template reset-failover-flag($redundancy-group) {
  var $rpc = {
    <request-chassis-cluster-failover-reset> {
      <redundancy-group> $redundancy-group;
    }
  }
  expr jcs:execute($connection, $rpc);
  /* sleep for command to take affect */
  expr jcs:sleep(1,000);
}

/* request rg failover */
template request-rg-failover($node,$redundancy-group) {
  var $rpc = {
    <request-chassis-cluster-failover> {
      <redundancy-group> $redundancy-group;
      <node> $node;
    }
  }
  expr jcs:execute($connection, $rpc);
  /* sleep for command to take affect */
  expr jcs:sleep(1,000);
}   

/* main function */
match / {
  <output> "EVENTD MESSAGE RECEIVED: " _ $event;
  var $node-map-nodes = ext:node-set($node-map);
  if (($node-map-nodes//node[name="node0"]/ospf-int == "") or ($node-map-nodes//node[name="node1"]/ospf-int  == "") or ($monitored-rg == "") or ($ospf-area == "") or ($ospf-ri == "") or ($event-diff == "") or ($event-sleep == "") or ($restore-diff == "")) {
    <output> "Configuration not correctly defined under chassis cluster";
    expr jcs:close($connection);
  } else {
    <output> "Configuration correctly defined";
    call parse-log-message(){
      with $message = $event;
    }
  }

  <event-script-results> {
    <output> "EVENTD Message Processing Complete";
  }
}
