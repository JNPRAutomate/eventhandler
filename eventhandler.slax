version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";ns date = "http://exslt.org/dates-and-times";import "/var/db/scripts/import/junos.xsl";/* globals *//* event message recieved from the event engine */var $event = event-script-input/trigger-event/message;/* connection to local routing engine */var $connection = jcs:open();/* globals - statically defined */var $monitored-rg = "1"; /* RG to watch for monitor-ip failures */var $ospf-area = "0.0.0.0"; /* OSPF area to disable interface in */var $ospf-ri = "foo"; /* routing instance OSPF is configured in */var $event-diff = 30; /* max diff in seconds between two events */var $restore-diff = 60; /* max diff in sec between events for ip restore *//* XML structure used to map information to each node in the cluster */var $node-map = {  <nodes> {    <node> {      <name> "node0";      <ospf-int> "reth0.0"; /* Interface to disable on node0 if failure conditions matched */    }    <node> {      <name> "node1";      <ospf-int> "reth1.0"; /* Interface to disable on node1 if failure conditions matched */    }  }}/* parse log message */template parse-log-message($message) {  /* match only JSRPD messages, return XML of message */  /* types to match */  var $rg-state-change = "JSRPD_RG_STATE_CHANGE";  var $ip-mon-fail = "JSRPD_SET_IP_MON_FAILURE";  var $ip-mon-up = "JSRPD_UNSET_IP_MON_FAILURE";  var $sane = jcs:regex("(.*): (.*)",normalize-space($message));  var $type = normalize-space($sane[2]);  var $data = normalize-space($sane[3]);  if ($type == $ip-mon-fail) {    /* IP Monitor failure JSRPD_SET_IP_MON_FAILURE */    var $rg-group-regex = jcs:regex("IP Monitor failed for redundancy-group ([0-9]+)",$data);    var $rg-group = $rg-group-regex[2];    if ($rg-group != "") {      <output> "IP Monitor failed for rg " _ $rg-group;      if ($monitored-rg == $rg-group) {        /* Failure conditions met, taking action */        <output> "Monitored RG " _ $monitored-rg _ " has failed. Taking action.";        var $node-name = {          call get-local-node();        }        var $rg-status = {          call get-rg-status() {            with $rg-id = "0";          }        }        var $rg-status-nodes = ext:node-set($rg-status);        var $nodes = ext:node-set($node-map);        /* check to see that rg 0 is in primary state */        if ("primary" == $rg-status-nodes//node[name=$node-name]/status) {          var $failures = {            call get-rg-failures() {              with $node-name = $node-name;              with $rg-id = $monitored-rg;            }          }          var $failures-nodes = ext:node-set($failures);          var $logs = ext:node-set($failures-nodes//logs//*);          for-each($logs) {            var $line = normalize-space(.);            var $new-line = jcs:regex("(.*) : (.*)->(.*), reason: (.*)",$line);            var $time = normalize-space($new-line[2]);            var $old-state = $new-line[3];            var $new-state = $new-line[4];            var $failure-reason = normalize-space($new-line[5]);            <output> "Failure Reason: " _ $failure-reason _ " detected";            if ((normalize-space($failure-reason) == "Control link failure") or (normalize-space($failure-reason) == "Control & Fabric links down")) {              /* check time */              var $current-time = date:date-time();              var $isofmt = {                call jdate-iso8601() {                  with $date = $time;                }              }              var $within-window = {                call compare-date(){                  with $date1 = $isofmt;                  with $date2 = $current-time; /* current time */                  with $diff = $event-diff;                }              }              if ($within-window == "true") {                <output> "Event at " _ $isofmt _ " within " _ $event-diff _ " seconds from now " _ $current-time;                <output> "Disabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int _ " Failure Reason: " _ $failure-reason;                call open-config();                call disable-ospf-interface-ri(){                  with $interface = $nodes//node[name=$node-name]/ospf-int;                }                call commit-config(){                  with $message = "OSPF Disabled on interface " _ $nodes//node[name=$node-name]/ospf-int _ " due to IP Monitor failure";                }                <output> "Clearing chassis cluster information buffer";                /* call clear-cluster-information(); */              } else {                /* event outside of time window */                <output> "Event at " _ $isofmt _ " outside of window " _ $event-diff _ " seconds from now " _ $current-time;              }            }          }        } else {          /* node not set */          <output> "Node state " _ $rg-status-nodes//node[name=$node-name]/status _ " does not match, skipping.";        }      } else {        /* rg not monitored */        <output> "RG " _ $rg-group _ " not monitored, skipping.";      }    } else {      /* rg group not set */      <output> "RG not determined, skipping.";    }  } else if ($type == $rg-state-change) {    /* Redundancy group state change JSRPD_RG_STATE_CHANGE */    var $rg-group-regex = jcs:regex("Redundancy-group ([0-9]+) transitioned from '([a-zA-Z\-]*)' to '([a-zA-Z\-]*)' state due to (.*)",$data);    var $rg-group = $rg-group-regex[2];    var $old-rg-state = $rg-group-regex[3];    var $new-rg-state = $rg-group-regex[4];    if ($rg-group != "") {      <output> "Redundancy group " _ $rg-group _ " transitioned state";      if ($monitored-rg == $rg-group) {        /* Failure conditions met, taking action */        <output> "Monitored RG " _ $monitored-rg _ " has failed. Taking action.";        var $node-name = {          call get-local-node();        }        var $rg-status = {          call get-rg-status() {            with $rg-id = "0";          }        }        var $rg-status-nodes = ext:node-set($rg-status);        var $nodes = ext:node-set($node-map);        if ("primary" == $rg-status-nodes//node[name=$node-name]/status) {          var $failures = {            call get-rg-failures() {              with $node-name = $node-name;              with $rg-id = $monitored-rg;            }          }          var $failures-nodes = ext:node-set($failures);          var $logs = ext:node-set($failures-nodes//logs//*);          for-each($logs) {            var $line = normalize-space(.);            var $new-line = jcs:regex("(.*) : (.*)->(.*), reason: (.*)",$line);            var $time = normalize-space($new-line[2]);            var $old-state = $new-line[3];            var $new-state = $new-line[4];            var $failure-reason = normalize-space($new-line[5]);            <output> "Failure Reason: " _ $failure-reason _ " detected";            if ((normalize-space($failure-reason) == "Control link failure") or (normalize-space($failure-reason) == "Control & Fabric links down")) {              /* check time */              var $current-time = date:date-time();              var $isofmt = {                call jdate-iso8601(){                  with $date = $time;                }              }              <output> "COMPARE TIMES " _ $isofmt _" TO " _ $current-time _ " DIFF " _ $event-diff;              var $within-window = {                call compare-date(){                  with $date1 = $isofmt;                  with $date2 = $current-time; /* current time */                  with $diff = $event-diff;                }              }              if ($within-window == "true") {                <output> "Event at " _ $isofmt _ " within " _ $event-diff _ " seconds from now " _ $current-time;                <output> "Disabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int _ " Failure Reason: " _ $failure-reason;                call open-config();                call disable-ospf-interface-ri(){                  with $interface = $nodes//node[name=$node-name]/ospf-int;                }                call commit-config(){                  with $message = "OSPF Disabled on interface " _ $nodes//node[name=$node-name]/ospf-int _ " due to IP Monitor failure";                }                <output> "Clearing chassis cluster information buffer";                /* call clear-cluster-information(); */              } else {                <output> "Event at " _ $isofmt _ " outside of window " _ $event-diff _ " seconds from now " _ $current-time;              }            }          }        } else {          <output> "Node state " _ $rg-status-nodes//node[name=$node-name]/status _ " does not match, skipping.";        }      } else {        /* rg not monitored */        <output> "RG " _ $rg-group _ " not monitored, skipping.";      }    } else {      /* rg group not set */      <output> "RG not determined, skipping.";    }  } else if ($type == $ip-mon-up) {    /* IP Monitor failure recovered JSRPD_UNSET_IP_MON_FAILURE*/    var $rg-group-regex = jcs:regex("IP Monitor failure recovered for redundancy-group ([0-9]+)",$data);	  var $rg-group = $rg-group-regex[2];    if ($rg-group != "") {      <output> "IP Monitor failure recovered for rg " _ $rg-group;      if ($monitored-rg == $rg-group) {        <output> "Failed monitored RG " _ $monitored-rg _ " has recovered. Taking action.";				var $node-name = {					call get-local-node();				}				var $rg-status = {					call get-rg-status() {						with $rg-id = "0";					}				}        var $rg-status-nodes = ext:node-set($rg-status);				var $nodes = ext:node-set($node-map);        /* check to see that rg 0 is in primary state */				if ("primary" != $rg-status-nodes//node[name=$node-name]/status) {          var $chassis-cluster-info = {						call get-rg-failures() {							with $node-name = $node-name;							with $rg-id = "0";							/* with $rg-id = $monitored-rg; */						}					}          var $chassis-cluster-info-nodes = ext:node-set($chassis-cluster-info);					var $logs = ext:node-set($chassis-cluster-info-nodes//logs//*);          for-each($logs) {            var $line = normalize-space(.);						var $new-line = jcs:regex("(.*) : (.*)->(.*), reason: (.*)",$line);						var $time = normalize-space($new-line[2]);						var $old-state = $new-line[3];						var $new-state = $new-line[4];						var $rg-state-change-reason = normalize-space($new-line[5]);            <output> "RG State change Reason: " _ $rg-state-change-reason;            /* set to match the most consistant */            if ((normalize-space($old-state) == "primary") and (normalize-space($new-state) == "secondary-hold")) {              var $current-time = date:date-time();              var $isofmt = {								call jdate-iso8601() {									with $date = $time;								}							}              <output> "COMPARE TIMES " _ $isofmt _" TO " _ $current-time _ " DIFF " _ $event-diff;							var $within-window = {								call compare-date(){									with $date1 = $isofmt;									with $date2 = $current-time; /* current time */									with $diff = $restore-diff;								}							}              /* only execute on first itteration since for-each loops happen concurrently and no sigular message identifed */              if ($within-window == "true") {                <output> "Event at " _ $isofmt _ " within " _ $event-diff _ " seconds from now " _ $current-time;								<output> "Enabling OSPF on interface: " _ $nodes//node[name=$node-name]/ospf-int _ " RG change reason: " _ $rg-state-change-reason;								call open-config();								call enable-ospf-interface-ri(){									with $interface = $nodes//node[name=$node-name]/ospf-int;								}								call commit-config(){									with $message = "OSPF Enabled on interface " _ $nodes//node[name=$node-name]/ospf-int _ " due to IP Monitor recovery";								}								<output> "Clearing chassis cluster information buffer";								/* call clear-cluster-information(); */              } else {                /* event outside of time window */								<output> "Event at " _ $isofmt _ " outside of window " _ $event-diff _ " seconds from now " _ $current-time;              } /* end time window check */            } /* end check on rg state change failure conditions */          } /* end foreach statement */        } else {          /* end check on primary rg state */          <output> "Node state " _ $rg-status-nodes//node[name=$node-name]/status _ " does not match, skipping.";        }      } else {        /* rg group not monitored */        <output> "RG " _ $rg-group _ " not monitored, skipping.";      }    } else {      /* rg-group is undefined */      <output> "RG not determined, skipping.";    }  } else {    /* Message doesn't match */    <output> "Type: " _ $type _ " and Message: " _ $data _ "not matched. No action taken";  }}/* function to disable ospf */template disable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable>;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to disable ospf of a specific interface*/template disable-ospf-interface($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <area> {              <name> $ospf-area;              <interface> {                <name> $interface;                <disable>;              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to disable ospf of a specific interface*/template disable-ospf-interface-ri($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <routing-instances> {          <instance> {            <name> $ospf-ri;            <protocols> {              <ospf> {                <area> {                  <name> $ospf-area;                  <interface> {                    <name> $interface;                    <disable>;                  }                }              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to disable ospf of a specific interface*/template enable-ospf-interface-ri($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <routing-instances> {          <instance> {            <name> $ospf-ri;            <protocols> {              <ospf> {                <area> {                  <name> $ospf-area;                  <interface> {                    <name> $interface;                    <disable delete="delete">;                  }                }              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to enable ospf of a specific interface*/template enable-ospf-interface($interface){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <area> {              <name> $ospf-area;              <interface> {                <name> $interface;                <disable>;              }            }          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to enable ospf */template enable-ospf(){  var $rpc = {    <load-configuration> {      <configuration> {        <protocols> {          <ospf> {            <disable delete="delete">;          }        }      }    }  }  expr jcs:execute($connection,$rpc);}/* function to get chassis cluster information */template get-cluster-information(){  var $rpc = {    <get-chassis-cluster-information>;  }  var $results = jcs:execute($connection,$rpc);  copy-of $results;}/* function to get the failure reasons from an RG based on node name */template get-rg-failures($node-name,$rg-id){  var $results = {    call get-cluster-information();  }  var $results-nodes = ext:node-set($results);  var $failure-reason = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]//monitoring-failure-string;  var $failure-messages = $results-nodes//multi-routing-engine-item[re-name=$node-name]//redundancy-group-information[redundancy-group-id=$rg-id]/redundancy-group-state-transition-events;  <cluster-information> {    <reason> $failure-reason;    <logs> {      copy-of ext:node-set($failure-messages);    }  }}/* function to clear chassis cluster information */template clear-cluster-information(){  var $rpc = {    <clear-chassis-cluster-information>;  }  var $results = jcs:execute($connection,$rpc);}/* function to get chassis cluster status*/template get-cluster-status(){  var $rpc = {    <get-chassis-cluster-status>;  }  var $results = jcs:execute($connection,$rpc);  copy-of $results;}template get-rg-status($rg-id) {  var $results = {    call get-cluster-status();  }  var $results-nodes = ext:node-set($results);  var $rg-status-node0 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[1];  var $rg-status-node1 = $results-nodes//redundancy-group[redundancy-group-id=$rg-id]/device-stats/redundancy-group-status[2];  <status> {    <rg> $rg-id;    <node> {      <name> "node0";      <status> $rg-status-node0;    }    <node> {      <name> "node1";      <status> $rg-status-node1;    }  }}/* function to open config */template open-config() {  var $rpc = {    <open-configuration> {      <private>;    }  }  expr jcs:execute($connection,$rpc);}/* function to commit config */template commit-config($message) {  var $rpc = {    <commit-configuration> {      <log> $message;    }  }  expr jcs:execute($connection,$rpc);}template get-local-node() {  var $rpc = {    <rpc> {      <command> "show chassis routing-engine node local";    }  }  var $results = jcs:execute($connection,$rpc);  <result> $results/multi-routing-engine-item/re-name;}/* convert month to int */template month-name-int($name) {  if ($name == "Jan") {    <result> "01";  } else if ($name == "Feb") {    <result> "02";  } else if ($name == "Mar") {    <result> "03";  } else if ($name == "Apr") {    <result> "04";  } else if ($name == "May") {    <result> "05";  } else if ($name == "Jun") {    <result> "06";  } else if ($name == "Jul") {    <result> "07";  } else if ($name == "Aug") {    <result> "08";  } else if ($name == "Sep") {    <result> "09";  } else if ($name == "Oct") {    <result> "10";  } else if ($name == "Nov") {    <result> "11";  } else if ($name == "Dec") {    <result> "12";  } else {    /* No match return empty */    <result> "";  }}/* pad a number with a 0 if it is less than 2 char in length */template lpad-zero($date){  if (string-length($date) < 2) {    <result> "0" _ $date;  } else {    <result> $date;  }}/* convert a timestamp found in show-chassis-cluster-information to iso8601 format */template jdate-iso8601($date) {  /* Expected format "Jul 11 13:44:09.650" */  var $sane = jcs:regex("([A-Za-z]{3}) ([0-9]+) ([0-9]+:[0-9]+:[0-9]+)",normalize-space($date));  var $month = {    call month-name-int($name = $sane[2]);  }  var $day = {    call lpad-zero() {      with $date = $sane[3];    }  }  var $time = $sane[4];  var $year = date:year();  var $isofmt = $year _ "-" _ $month _ "-" _ $day _ "T" _ $time _ "Z";  <result> $isofmt;}/* template that checks if the diff between two times is within the specified diff *//* $date1 and $date2 must be in ISO8601 format *//* $diff is in seconds */template compare-date($date1,$date2,$diff){  var $d1seconds = date:seconds($date1);  var $d2seconds = date:seconds($date2);  var $calcdiff = $d2seconds - $d1seconds;  if (($calcdiff <= $diff) and ($calcdiff >= 0)) { /* check both sides of the bounds */    /* The times are within the diff */    <result> "true";  } else {    /* returning false because both conditions failed */    <result> "false";  }}/* main function */match / {  /* Determine who I am  */  call parse-log-message(){    with $message = $event;  }  <event-script-results> {    <output> "MESSAGE RECEIVED: " _ $event;  }}